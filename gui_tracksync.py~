import tkinter as tk
from tkinter import filedialog, messagebox, Toplevel, ttk
import os
import threading

def select_folder(entry, label, button):
    """
    Opens a file dialog for the user to select a folder and updates the corresponding entry widget.
    Also provides visual feedback when folder is selected.
    """
    folder = filedialog.askdirectory()
    if folder:
        entry.delete(0, tk.END)
        entry.insert(0, folder)

        # Visual feedback - show folder name and file count
        folder_name = os.path.basename(folder)
        try:
            file_count = len([f for f in os.listdir(folder)
                              if f.lower().endswith(('.mp3', '.flac', '.wav', '.m4a'))])
            label.config(text=f"✓ {folder_name} ({file_count} audio files)",
                         fg="#2E7D32", font=("Segoe UI", 9))
            button.config(text="Change", bg="#E8F5E8")
        except:
            label.config(text=f"✓ {folder_name}", fg="#2E7D32", font=("Segoe UI", 9))
            button.config(text="Change", bg="#E8F5E8")

def start_process(script_mode, priority_entry, secondary_entry, output_entry, status_label, progress_var, run_button):
    """
    Initiates the track merging process with enhanced user feedback.
    """
    priority_folder = priority_entry.get().strip()
    secondary_folder = secondary_entry.get().strip()
    output_folder_name = output_entry.get().strip()

    # Enhanced validation with helpful messages
    if not priority_folder:
        messagebox.showwarning("Missing Input", "Please select your main playlist folder (Priority Folder)")
        return
    if not secondary_folder:
        messagebox.showwarning("Missing Input", "Please select your second playlist folder (Secondary Folder)")
        return
    if not output_folder_name:
        messagebox.showwarning("Missing Input", "Please enter a name for your merged playlist folder")
        return

    output_folder = os.path.join(os.path.dirname(priority_folder), output_folder_name)

    # Check if output folder exists
    if os.path.exists(output_folder):
        if not messagebox.askyesno("Folder Exists",
                                   f"The folder '{output_folder_name}' already exists.\n\nDo you want to overwrite it?"):
            return

    # Disable run button and show progress
    run_button.config(state="disabled", text="Processing...", bg="#CCCCCC")
    status_label.config(text="🔄 Starting to merge your playlists...", fg="#1976D2")
    progress_var.set(0)

    # Run in separate thread
    threading.Thread(
        target=run_tracksync,
        args=(script_mode, priority_folder, secondary_folder, output_folder,
              status_label, progress_var, run_button),
    ).start()

def run_tracksync(script_mode, priority_folder, secondary_folder, output_folder,
                  status_label, progress_var, run_button):
    """
    Enhanced processing with better user feedback and progress updates.
    """
    try:
        # Import appropriate script
        if script_mode == "Preserve Numbering":
            from tracksync import load_files_with_metadata, match_tracks, renumber_and_copy_files
        else:
            from tracksyncclean import load_files_with_metadata, match_tracks, renumber_and_copy_files

        # Step 1: Load priority folder
        status_label.config(text="📁 Loading your main playlist...", fg="#1976D2")
        progress_var.set(20)
        priority_files = load_files_with_metadata(priority_folder)

        # Step 2: Load secondary folder
        status_label.config(text="📁 Loading your second playlist...", fg="#1976D2")
        progress_var.set(40)
        secondary_files = load_files_with_metadata(secondary_folder)

        # Step 3: Match tracks
        status_label.config(text="🔍 Finding and matching your songs...", fg="#1976D2")
        progress_var.set(60)
        final_list = match_tracks(priority_files, secondary_files)

        # Step 4: Copy files
        status_label.config(text="📂 Creating your merged playlist...", fg="#1976D2")
        progress_var.set(80)
        renumber_and_copy_files(final_list, output_folder)

        # Success
        progress_var.set(100)
        status_label.config(text="🎉 Success! Your playlists have been merged!", fg="#2E7D32")

        result_msg = f"✅ Successfully merged your playlists!\n\n"
        result_msg += f"📊 Total tracks processed: {len(final_list)}\n"
        result_msg += f"📁 Saved to: {os.path.basename(output_folder)}\n\n"
        result_msg += f"Your merged playlist is ready to enjoy! 🎵"

        messagebox.showinfo("Mission Accomplished! 🎉", result_msg)

    except Exception as e:
        status_label.config(text="❌ Oops! Something went wrong.", fg="#D32F2F")
        error_msg = f"Don't worry, we can fix this! 😊\n\n"
        error_msg += f"Error details: {str(e)}\n\n"
        error_msg += f"💡 Try checking:\n"
        error_msg += f"• Are both folders accessible?\n"
        error_msg += f"• Do they contain audio files?\n"
        error_msg += f"• Is the output name valid?"
        messagebox.showerror("Oops! 🤔", error_msg)
        progress_var.set(0)

    finally:
        # Re-enable button
        run_button.config(state="normal", text="🚀 Merge My Playlists", bg="#4CAF50")

def show_help():
    """
    Enhanced help window with your personal touch and clearer explanations.
    """
    help_window = Toplevel()
    help_window.title("How TrackSync Works")
    help_window.geometry("480x300")
    help_window.resizable(False, False)
    help_window.configure(bg="#FAFAFA")

    # Title
    title_label = tk.Label(help_window, text="🎵 Choose Your Naming Style",
                           font=("Segoe UI", 14, "bold"), bg="#FAFAFA", fg="#1976D2")
    title_label.pack(pady=15)

    # Main explanation
    help_text = (
        "Preserve Numbering 📝\n"
        "  • Keeps the numbers already in your song names\n"
        "  • Example: '002. Song Title.mp3' → 'Track 001 - 002. Song Title.mp3'\n"
        "  • Perfect if those numbers mean something to you!\n\n"

        "Clean Numbering ✨\n"
        "  • Removes old numbers for a clean, fresh look\n"
        "  • Example: '002. Song Title.mp3' → 'Track 001 - Song Title.mp3'\n"
        "  • Great for a uniform, organized appearance!\n\n"

        "Not sure? Try Clean Numbering first! 😊"
    )

    content_frame = tk.Frame(help_window, bg="#FAFAFA")
    content_frame.pack(pady=10, padx=20, fill="both", expand=True)

    label = tk.Label(content_frame, text=help_text, justify="left",
                     font=("Segoe UI", 10), bg="#FAFAFA", fg="#333333")
    label.pack(pady=10)

    # Buttons frame
    button_frame = tk.Frame(help_window, bg="#FAFAFA")
    button_frame.pack(pady=15)

    read_more_button = tk.Button(button_frame, text="📖 Read More Details",
                                 command=show_detailed_explanation,
                                 bg="#2196F3", fg="white", font=("Segoe UI", 10),
                                 relief="flat", padx=20, pady=8)
    read_more_button.pack(side="left", padx=10)

    close_button = tk.Button(button_frame, text="Got It! 👍",
                             command=help_window.destroy,
                             bg="#4CAF50", fg="white", font=("Segoe UI", 10),
                             relief="flat", padx=20, pady=8)
    close_button.pack(side="right", padx=10)

def show_detailed_explanation():
    """
    Your personal story and detailed explanation - keeping your authentic voice!
    """
    detail_window = Toplevel()
    detail_window.title("The Story Behind TrackSync")
    detail_window.geometry("600x500")
    detail_window.resizable(True, True)
    detail_window.configure(bg="#FAFAFA")

    # Create scrollable text area
    main_frame = tk.Frame(detail_window, bg="#FAFAFA")
    main_frame.pack(fill="both", expand=True, padx=20, pady=20)

    # Title
    title_label = tk.Label(main_frame, text="🎯 Why I Built This Feature",
                           font=("Segoe UI", 16, "bold"), bg="#FAFAFA", fg="#1976D2")
    title_label.pack(pady=(0, 15))

    # Scrollable content
    canvas = tk.Canvas(main_frame, bg="#FAFAFA", highlightthickness=0)
    scrollbar = ttk.Scrollbar(main_frame, orient="vertical", command=canvas.yview)
    scrollable_frame = tk.Frame(canvas, bg="#FAFAFA")

    scrollable_frame.bind(
        "<Configure>",
        lambda e: canvas.configure(scrollregion=canvas.bbox("all"))
    )

    canvas.create_window((0, 0), window=scrollable_frame, anchor="nw")
    canvas.configure(yscrollcommand=scrollbar.set)

    # Your personal story (keeping your authentic message)
    detailed_text = (
        "📱 The Real Problem I Solved:\n\n"

        "I created this feature to solve a frustrating issue I encountered with ByClick Downloader. "
        "When you download playlist videos with 'Add track numbers to file names' enabled, "
        "the files get numbered based on the playlist order at that moment.\n\n"

        "🚨 But here's the problem:\n"
        "If videos in the original playlist get removed or made private later, those numbers "
        "become misaligned! You end up with gaps like Track 001, Track 003, Track 007... "
        "It's messy and ruins your carefully organized music collection.\n\n"

        "💡 My Solution - Two Options:\n\n"

        "🔢 Preserve Numbering:\n"
        "Keep those original numbers because they might have meaning! Maybe they represent "
        "the original chart positions, release order, or your personal ranking. "
        "This mode respects that context while still organizing everything neatly.\n\n"

        "✨ Clean Numbering:\n"
        "Strip away all that old numbering chaos and create a beautiful, uniform collection. "
        "Perfect for when you just want everything to look consistent and professional.\n\n"

        "🎵 The Result:\n"
        "No more gaps, no more confusion, no more messy playlists! TrackSync gives you "
        "the flexibility to handle your music collection exactly how YOU want it.\n\n"

        "Whether you're a perfectionist who loves clean numbering or someone who values "
        "the historical context of original numbers - I've got you covered! 😊\n\n"

        "P.S. This works great with any music source, not just ByClick Downloader!"
    )

    content_label = tk.Label(scrollable_frame, text=detailed_text, justify="left",
                             wraplength=540, font=("Segoe UI", 11), bg="#FAFAFA", fg="#333333")
    content_label.pack(pady=10, padx=10)

    canvas.pack(side="left", fill="both", expand=True)
    scrollbar.pack(side="right", fill="y")

    # Close button
    close_button = tk.Button(main_frame, text="Thanks for Sharing! 👏",
                             command=detail_window.destroy,
                             bg="#4CAF50", fg="white", font=("Segoe UI", 12, "bold"),
                             relief="flat", padx=30, pady=10)
    close_button.pack(pady=15)

    # Bind mousewheel to canvas
    def _on_mousewheel(event):
        canvas.yview_scroll(int(-1*(event.delta/120)), "units")
    canvas.bind("<MouseWheel>", _on_mousewheel)

def create_gui():
    """
    Creates an intuitive, user-friendly GUI that feels welcoming and professional.
    """
    root = tk.Tk()
    root.title("🎵 TrackSync - Smart Playlist Merger")
    root.geometry("700x550")
    root.configure(bg="#F5F5F5")
    root.resizable(True, False)

    # Configure grid weights for responsive design
    root.grid_columnconfigure(1, weight=1)

    # Header section
    header_frame = tk.Frame(root, bg="#1976D2", height=80)
    header_frame.grid(row=0, column=0, columnspan=3, sticky="ew", pady=(0, 20))
    header_frame.grid_propagate(False)

    header_label = tk.Label(header_frame, text="🎵 TrackSync",
                            font=("Segoe UI", 20, "bold"), fg="white", bg="#1976D2")
    header_label.pack(pady=15)

    subtitle_label = tk.Label(header_frame, text="Merge your playlists like magic! ✨",
                              font=("Segoe UI", 11), fg="#E3F2FD", bg="#1976D2")
    subtitle_label.pack()

    # Main content frame
    main_frame = tk.Frame(root, bg="#F5F5F5")
    main_frame.grid(row=1, column=0, columnspan=3, sticky="ew", padx=30)
    main_frame.grid_columnconfigure(1, weight=1)

    # Priority folder section
    priority_label = tk.Label(main_frame, text="📁 Main Playlist (Priority Folder)",
                              font=("Segoe UI", 12, "bold"), bg="#F5F5F5", fg="#333")
    priority_label.grid(row=0, column=0, sticky="w", pady=(0, 5))

    priority_info = tk.Label(main_frame, text="This folder's order will be preserved",
                             font=("Segoe UI", 9), bg="#F5F5F5", fg="#666")
    priority_info.grid(row=1, column=0, columnspan=3, sticky="w", pady=(0, 10))

    priority_entry = tk.Entry(main_frame, font=("Segoe UI", 10), relief="solid", bd=1)
    priority_entry.grid(row=2, column=0, columnspan=2, sticky="ew", pady=(0, 5), ipady=8)

    priority_status = tk.Label(main_frame, text="Click Browse to select your main playlist folder",
                               font=("Segoe UI", 9), bg="#F5F5F5", fg="#666")
    priority_status.grid(row=3, column=0, columnspan=2, sticky="w", pady=(0, 15))

    priority_button = tk.Button(main_frame, text="Browse",
                                command=lambda: select_folder(priority_entry, priority_status, priority_button),
                                bg="#2196F3", fg="white", font=("Segoe UI", 10),
                                relief="flat", padx=20, pady=8)
    priority_button.grid(row=2, column=2, padx=(10, 0), pady=(0, 5))

    # Secondary folder section
    secondary_label = tk.Label(main_frame, text="📁 Second Playlist (Secondary Folder)",
                               font=("Segoe UI", 12, "bold"), bg="#F5F5F5", fg="#333")
    secondary_label.grid(row=4, column=0, sticky="w", pady=(0, 5))

    secondary_info = tk.Label(main_frame, text="Songs from here will fill in any gaps",
                              font=("Segoe UI", 9), bg="#F5F5F5", fg="#666")
    secondary_info.grid(row=5, column=0, columnspan=3, sticky="w", pady=(0, 10))

    secondary_entry = tk.Entry(main_frame, font=("Segoe UI", 10), relief="solid", bd=1)
    secondary_entry.grid(row=6, column=0, columnspan=2, sticky="ew", pady=(0, 5), ipady=8)

    secondary_status = tk.Label(main_frame, text="Click Browse to select your second playlist folder",
                                font=("Segoe UI", 9), bg="#F5F5F5", fg="#666")
    secondary_status.grid(row=7, column=0, columnspan=2, sticky="w", pady=(0, 15))

    secondary_button = tk.Button(main_frame, text="Browse",
                                 command=lambda: select_folder(secondary_entry, secondary_status, secondary_button),
                                 bg="#2196F3", fg="white", font=("Segoe UI", 10),
                                 relief="flat", padx=20, pady=8)
    secondary_button.grid(row=6, column=2, padx=(10, 0), pady=(0, 5))

    # Output folder section
    output_label = tk.Label(main_frame, text="📂 Name Your Merged Playlist",
                            font=("Segoe UI", 12, "bold"), bg="#F5F5F5", fg="#333")
    output_label.grid(row=8, column=0, sticky="w", pady=(0, 5))

    output_info = tk.Label(main_frame, text="This folder will be created next to your main playlist",
                           font=("Segoe UI", 9), bg="#F5F5F5", fg="#666")
    output_info.grid(row=9, column=0, columnspan=3, sticky="w", pady=(0, 10))

    output_entry = tk.Entry(main_frame, font=("Segoe UI", 10), relief="solid", bd=1)
    output_entry.grid(row=10, column=0, columnspan=3, sticky="ew", pady=(0, 15), ipady=8)
    output_entry.insert(0, "Merged_Playlist")

    # Mode selection section
    mode_frame = tk.Frame(main_frame, bg="#E8F5E8", relief="solid", bd=1)
    mode_frame.grid(row=11, column=0, columnspan=3, sticky="ew", pady=(0, 20), padx=0)
    mode_frame.grid_columnconfigure(0, weight=1)

    mode_header_frame = tk.Frame(mode_frame, bg="#E8F5E8")
    mode_header_frame.grid(row=0, column=0, sticky="ew", padx=15, pady=10)
    mode_header_frame.grid_columnconfigure(0, weight=1)

    mode_label = tk.Label(mode_header_frame, text="🎨 Choose Your Style",
                          font=("Segoe UI", 12, "bold"), bg="#E8F5E8", fg="#2E7D32")
    mode_label.grid(row=0, column=0, sticky="w")

    help_button = tk.Button(mode_header_frame, text="❓ Help", command=show_help,
                            bg="#4CAF50", fg="white", font=("Segoe UI", 9),
                            relief="flat", padx=15, pady=5)
    help_button.grid(row=0, column=1, sticky="e")

    mode_var = tk.StringVar(value="Clean Numbering")

    options_frame = tk.Frame(mode_frame, bg="#E8F5E8")
    options_frame.grid(row=1, column=0, sticky="ew", padx=15, pady=(0, 15))

    preserve_radio = tk.Radiobutton(options_frame, text="📝 Preserve Numbering (keep original numbers)",
                                    variable=mode_var, value="Preserve Numbering",
                                    bg="#E8F5E8", font=("Segoe UI", 10), fg="#333")
    preserve_radio.pack(anchor="w", pady=2)

    clean_radio = tk.Radiobutton(options_frame, text="✨ Clean Numbering (fresh, uniform look)",
                                 variable=mode_var, value="Clean Numbering",
                                 bg="#E8F5E8", font=("Segoe UI", 10), fg="#333")
    clean_radio.pack(anchor="w", pady=2)

    # Progress bar
    progress_var = tk.IntVar()
    progress_bar = ttk.Progressbar(main_frame, variable=progress_var, maximum=100,
                                   length=400, mode='determinate')
    progress_bar.grid(row=12, column=0, columnspan=3, sticky="ew", pady=(0, 10))

    # Status and run section
    status_label = tk.Label(main_frame, text="Ready to merge your playlists! 🎵",
                            font=("Segoe UI", 11), bg="#F5F5F5", fg="#666")
    status_label.grid(row=13, column=0, columnspan=3, pady=(0, 15))

    run_button = tk.Button(main_frame, text="🚀 Merge My Playlists",
                           command=lambda: start_process(mode_var.get(), priority_entry, secondary_entry,
                                                         output_entry, status_label, progress_var, run_button),
                           bg="#4CAF50", fg="white", font=("Segoe UI", 14, "bold"),
                           relief="flat", padx=40, pady=12)
    run_button.grid(row=14, column=0, columnspan=3, pady=20)

    # Footer
    footer_label = tk.Label(root, text="Made with ❤️ for music lovers",
                            font=("Segoe UI", 9), bg="#F5F5F5", fg="#999")
    footer_label.grid(row=15, column=0, columnspan=3, pady=10)

    root.mainloop()

if __name__ == "__main__":
    create_gui()